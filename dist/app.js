"use strict";

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _mongoose = require("mongoose");

var _mongoose2 = _interopRequireDefault(_mongoose);

var _httpStatusCodes = require("http-status-codes");

var _httpStatusCodes2 = _interopRequireDefault(_httpStatusCodes);

var _api = require("./api");

var _development = require("./config/env/development");

var _globalMiddleware = require("./api/middlewares/global-middleware");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_mongoose2.default.Promise = global.Promise;
//import swaggerUi from "swagger-ui-express";
//import swaggerDocument from "./config/swagger.json";
//import passport from "passport";

//import logger from "morgan";
//import cors from "cors";

_mongoose2.default.connect("mongodb://localhost:27017/" + _development.devConfig.database);

var app = (0, _express2.default)();
var PORT = _development.devConfig.port;

(0, _globalMiddleware.setGlobalMiddleware)(app);

app.use("/api", _api.restRouter);
app.use(function (req, res, next) {
  var error = new Error("Invalid Route");
  error.status = _httpStatusCodes2.default.NOT_FOUND;
  next(error);
});

app.use(function (error, req, res, next) {
  res.status(error.status || _httpStatusCodes2.default.INTERNAL_SERVER_ERROR);
  return res.json({
    error: {
      message: error.message
    }
  });
});

app.get("/", function (req, res) {
  res.json({
    msg: "Welcome to invoice builder backend"
  });
});

app.get("/invoices", function (req, res) {
  res.json(invoices);
});

app.listen(PORT, function () {
  console.log("Server is running at PORT " + _development.devConfig.port);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJQcm9taXNlIiwiZ2xvYmFsIiwiY29ubmVjdCIsImRldkNvbmZpZyIsImRhdGFiYXNlIiwiYXBwIiwiUE9SVCIsInBvcnQiLCJ1c2UiLCJyZXN0Um91dGVyIiwicmVxIiwicmVzIiwibmV4dCIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXMiLCJIdHRwU3RhdHVzIiwiTk9UX0ZPVU5EIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwianNvbiIsIm1lc3NhZ2UiLCJnZXQiLCJtc2ciLCJpbnZvaWNlcyIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBR0E7O0FBQ0E7O0FBSUE7Ozs7QUFFQUEsbUJBQVNDLE9BQVQsR0FBbUJDLE9BQU9ELE9BQTFCO0FBTEE7QUFDQTtBQUNBOztBQU5BO0FBQ0E7O0FBU0FELG1CQUFTRyxPQUFULGdDQUE4Q0MsdUJBQVVDLFFBQXhEOztBQUVBLElBQU1DLE1BQU0sd0JBQVo7QUFDQSxJQUFNQyxPQUFPSCx1QkFBVUksSUFBdkI7O0FBRUEsMkNBQW9CRixHQUFwQjs7QUFFQUEsSUFBSUcsR0FBSixDQUFRLE1BQVIsRUFBZ0JDLGVBQWhCO0FBQ0FKLElBQUlHLEdBQUosQ0FBUSxVQUFDRSxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUMxQixNQUFNQyxRQUFRLElBQUlDLEtBQUosQ0FBVSxlQUFWLENBQWQ7QUFDQUQsUUFBTUUsTUFBTixHQUFlQywwQkFBV0MsU0FBMUI7QUFDQUwsT0FBS0MsS0FBTDtBQUNELENBSkQ7O0FBTUFSLElBQUlHLEdBQUosQ0FBUSxVQUFDSyxLQUFELEVBQVFILEdBQVIsRUFBYUMsR0FBYixFQUFrQkMsSUFBbEIsRUFBMkI7QUFDakNELE1BQUlJLE1BQUosQ0FBV0YsTUFBTUUsTUFBTixJQUFnQkMsMEJBQVdFLHFCQUF0QztBQUNBLFNBQU9QLElBQUlRLElBQUosQ0FBUztBQUNkTixXQUFPO0FBQ0xPLGVBQVNQLE1BQU1PO0FBRFY7QUFETyxHQUFULENBQVA7QUFLRCxDQVBEOztBQVNBZixJQUFJZ0IsR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDWCxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN6QkEsTUFBSVEsSUFBSixDQUFTO0FBQ1BHLFNBQUs7QUFERSxHQUFUO0FBR0QsQ0FKRDs7QUFNQWpCLElBQUlnQixHQUFKLENBQVEsV0FBUixFQUFxQixVQUFDWCxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNqQ0EsTUFBSVEsSUFBSixDQUFTSSxRQUFUO0FBQ0QsQ0FGRDs7QUFJQWxCLElBQUltQixNQUFKLENBQVdsQixJQUFYLEVBQWlCLFlBQU07QUFDckJtQixVQUFRQyxHQUFSLGdDQUF5Q3ZCLHVCQUFVSSxJQUFuRDtBQUNELENBRkQiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCBIdHRwU3RhdHVzIGZyb20gXCJodHRwLXN0YXR1cy1jb2Rlc1wiO1xuLy9pbXBvcnQgbG9nZ2VyIGZyb20gXCJtb3JnYW5cIjtcbi8vaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmltcG9ydCB7IHJlc3RSb3V0ZXIgfSBmcm9tIFwiLi9hcGlcIjtcbmltcG9ydCB7IGRldkNvbmZpZyB9IGZyb20gXCIuL2NvbmZpZy9lbnYvZGV2ZWxvcG1lbnRcIjtcbi8vaW1wb3J0IHN3YWdnZXJVaSBmcm9tIFwic3dhZ2dlci11aS1leHByZXNzXCI7XG4vL2ltcG9ydCBzd2FnZ2VyRG9jdW1lbnQgZnJvbSBcIi4vY29uZmlnL3N3YWdnZXIuanNvblwiO1xuLy9pbXBvcnQgcGFzc3BvcnQgZnJvbSBcInBhc3Nwb3J0XCI7XG5pbXBvcnQgeyBzZXRHbG9iYWxNaWRkbGV3YXJlIH0gZnJvbSBcIi4vYXBpL21pZGRsZXdhcmVzL2dsb2JhbC1taWRkbGV3YXJlXCI7XG5cbm1vbmdvb3NlLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbm1vbmdvb3NlLmNvbm5lY3QoYG1vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvJHtkZXZDb25maWcuZGF0YWJhc2V9YCk7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IFBPUlQgPSBkZXZDb25maWcucG9ydDtcblxuc2V0R2xvYmFsTWlkZGxld2FyZShhcHApO1xuXG5hcHAudXNlKFwiL2FwaVwiLCByZXN0Um91dGVyKTtcbmFwcC51c2UoKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiSW52YWxpZCBSb3V0ZVwiKTtcbiAgZXJyb3Iuc3RhdHVzID0gSHR0cFN0YXR1cy5OT1RfRk9VTkQ7XG4gIG5leHQoZXJyb3IpO1xufSk7XG5cbmFwcC51c2UoKGVycm9yLCByZXEsIHJlcywgbmV4dCkgPT4ge1xuICByZXMuc3RhdHVzKGVycm9yLnN0YXR1cyB8fCBIdHRwU3RhdHVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUik7XG4gIHJldHVybiByZXMuanNvbih7XG4gICAgZXJyb3I6IHtcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcbiAgICB9XG4gIH0pO1xufSk7XG5cbmFwcC5nZXQoXCIvXCIsIChyZXEsIHJlcykgPT4ge1xuICByZXMuanNvbih7XG4gICAgbXNnOiBcIldlbGNvbWUgdG8gaW52b2ljZSBidWlsZGVyIGJhY2tlbmRcIlxuICB9KTtcbn0pO1xuXG5hcHAuZ2V0KFwiL2ludm9pY2VzXCIsIChyZXEsIHJlcykgPT4ge1xuICByZXMuanNvbihpbnZvaWNlcyk7XG59KTtcblxuYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGBTZXJ2ZXIgaXMgcnVubmluZyBhdCBQT1JUICR7ZGV2Q29uZmlnLnBvcnR9YCk7XG59KTtcbiJdfQ==