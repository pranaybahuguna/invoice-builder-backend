"use strict";

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _mongoose = require("mongoose");

var _mongoose2 = _interopRequireDefault(_mongoose);

var _httpStatusCodes = require("http-status-codes");

var _httpStatusCodes2 = _interopRequireDefault(_httpStatusCodes);

var _morgan = require("morgan");

var _morgan2 = _interopRequireDefault(_morgan);

var _swaggerUiExpress = require("swagger-ui-express");

var _swaggerUiExpress2 = _interopRequireDefault(_swaggerUiExpress);

var _swagger = require("./config/swagger.json");

var _swagger2 = _interopRequireDefault(_swagger);

var _cors = require("cors");

var _cors2 = _interopRequireDefault(_cors);

var _api = require("./api");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_mongoose2.default.Promise = global.Promise;
_mongoose2.default.connect("mongodb://localhost:27017/invoice-builder");

var app = (0, _express2.default)();
var PORT = 3000;

app.use(_express2.default.json());
app.use((0, _cors2.default)());
app.use((0, _morgan2.default)("common"));
app.use("/api-docs", _swaggerUiExpress2.default.serve, _swaggerUiExpress2.default.setup(_swagger2.default, { explorer: true }));
app.use("/api", _api.restRouter);
app.use(function (req, res, next) {
  var error = new Error("Invalid Route");
  error.status = _httpStatusCodes2.default.NOT_FOUND;
  next(error);
});

app.use(function (error, req, res, next) {
  res.status(error.status || _httpStatusCodes2.default.INTERNAL_SERVER_ERROR);
  return res.json({
    error: {
      message: error.message
    }
  });
});

app.get("/", function (req, res) {
  res.json({
    msg: "Welcome to invoice builder backend"
  });
});

app.get("/invoices", function (req, res) {
  res.json(invoices);
});

app.listen(PORT, function () {
  console.log("Server is running at PORT " + PORT);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJQcm9taXNlIiwiZ2xvYmFsIiwiY29ubmVjdCIsImFwcCIsIlBPUlQiLCJ1c2UiLCJleHByZXNzIiwianNvbiIsInN3YWdnZXJVaSIsInNlcnZlIiwic2V0dXAiLCJzd2FnZ2VyRG9jdW1lbnQiLCJleHBsb3JlciIsInJlc3RSb3V0ZXIiLCJyZXEiLCJyZXMiLCJuZXh0IiwiZXJyb3IiLCJFcnJvciIsInN0YXR1cyIsIkh0dHBTdGF0dXMiLCJOT1RfRk9VTkQiLCJJTlRFUk5BTF9TRVJWRVJfRVJST1IiLCJtZXNzYWdlIiwiZ2V0IiwibXNnIiwiaW52b2ljZXMiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQUEsbUJBQVNDLE9BQVQsR0FBbUJDLE9BQU9ELE9BQTFCO0FBQ0FELG1CQUFTRyxPQUFULENBQWlCLDJDQUFqQjs7QUFFQSxJQUFNQyxNQUFNLHdCQUFaO0FBQ0EsSUFBTUMsT0FBTyxJQUFiOztBQUVBRCxJQUFJRSxHQUFKLENBQVFDLGtCQUFRQyxJQUFSLEVBQVI7QUFDQUosSUFBSUUsR0FBSixDQUFRLHFCQUFSO0FBQ0FGLElBQUlFLEdBQUosQ0FBUSxzQkFBTyxRQUFQLENBQVI7QUFDQUYsSUFBSUUsR0FBSixDQUNFLFdBREYsRUFFRUcsMkJBQVVDLEtBRlosRUFHRUQsMkJBQVVFLEtBQVYsQ0FBZ0JDLGlCQUFoQixFQUFpQyxFQUFFQyxVQUFVLElBQVosRUFBakMsQ0FIRjtBQUtBVCxJQUFJRSxHQUFKLENBQVEsTUFBUixFQUFnQlEsZUFBaEI7QUFDQVYsSUFBSUUsR0FBSixDQUFRLFVBQUNTLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEVBQW9CO0FBQzFCLE1BQU1DLFFBQVEsSUFBSUMsS0FBSixDQUFVLGVBQVYsQ0FBZDtBQUNBRCxRQUFNRSxNQUFOLEdBQWVDLDBCQUFXQyxTQUExQjtBQUNBTCxPQUFLQyxLQUFMO0FBQ0QsQ0FKRDs7QUFNQWQsSUFBSUUsR0FBSixDQUFRLFVBQUNZLEtBQUQsRUFBUUgsR0FBUixFQUFhQyxHQUFiLEVBQWtCQyxJQUFsQixFQUEyQjtBQUNqQ0QsTUFBSUksTUFBSixDQUFXRixNQUFNRSxNQUFOLElBQWdCQywwQkFBV0UscUJBQXRDO0FBQ0EsU0FBT1AsSUFBSVIsSUFBSixDQUFTO0FBQ2RVLFdBQU87QUFDTE0sZUFBU04sTUFBTU07QUFEVjtBQURPLEdBQVQsQ0FBUDtBQUtELENBUEQ7O0FBU0FwQixJQUFJcUIsR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDVixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN6QkEsTUFBSVIsSUFBSixDQUFTO0FBQ1BrQixTQUFLO0FBREUsR0FBVDtBQUdELENBSkQ7O0FBTUF0QixJQUFJcUIsR0FBSixDQUFRLFdBQVIsRUFBcUIsVUFBQ1YsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDakNBLE1BQUlSLElBQUosQ0FBU21CLFFBQVQ7QUFDRCxDQUZEOztBQUlBdkIsSUFBSXdCLE1BQUosQ0FBV3ZCLElBQVgsRUFBaUIsWUFBTTtBQUNyQndCLFVBQVFDLEdBQVIsZ0NBQXlDekIsSUFBekM7QUFDRCxDQUZEIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XG5pbXBvcnQgSHR0cFN0YXR1cyBmcm9tIFwiaHR0cC1zdGF0dXMtY29kZXNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIm1vcmdhblwiO1xuaW1wb3J0IHN3YWdnZXJVaSBmcm9tIFwic3dhZ2dlci11aS1leHByZXNzXCI7XG5pbXBvcnQgc3dhZ2dlckRvY3VtZW50IGZyb20gXCIuL2NvbmZpZy9zd2FnZ2VyLmpzb25cIjtcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgeyByZXN0Um91dGVyIH0gZnJvbSBcIi4vYXBpXCI7XG5cbm1vbmdvb3NlLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbm1vbmdvb3NlLmNvbm5lY3QoXCJtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L2ludm9pY2UtYnVpbGRlclwiKTtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgUE9SVCA9IDMwMDA7XG5cbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuYXBwLnVzZShjb3JzKCkpO1xuYXBwLnVzZShsb2dnZXIoXCJjb21tb25cIikpO1xuYXBwLnVzZShcbiAgXCIvYXBpLWRvY3NcIixcbiAgc3dhZ2dlclVpLnNlcnZlLFxuICBzd2FnZ2VyVWkuc2V0dXAoc3dhZ2dlckRvY3VtZW50LCB7IGV4cGxvcmVyOiB0cnVlIH0pXG4pO1xuYXBwLnVzZShcIi9hcGlcIiwgcmVzdFJvdXRlcik7XG5hcHAudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIkludmFsaWQgUm91dGVcIik7XG4gIGVycm9yLnN0YXR1cyA9IEh0dHBTdGF0dXMuTk9UX0ZPVU5EO1xuICBuZXh0KGVycm9yKTtcbn0pO1xuXG5hcHAudXNlKChlcnJvciwgcmVxLCByZXMsIG5leHQpID0+IHtcbiAgcmVzLnN0YXR1cyhlcnJvci5zdGF0dXMgfHwgSHR0cFN0YXR1cy5JTlRFUk5BTF9TRVJWRVJfRVJST1IpO1xuICByZXR1cm4gcmVzLmpzb24oe1xuICAgIGVycm9yOiB7XG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gICAgfVxuICB9KTtcbn0pO1xuXG5hcHAuZ2V0KFwiL1wiLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oe1xuICAgIG1zZzogXCJXZWxjb21lIHRvIGludm9pY2UgYnVpbGRlciBiYWNrZW5kXCJcbiAgfSk7XG59KTtcblxuYXBwLmdldChcIi9pbnZvaWNlc1wiLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oaW52b2ljZXMpO1xufSk7XG5cbmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xuICBjb25zb2xlLmxvZyhgU2VydmVyIGlzIHJ1bm5pbmcgYXQgUE9SVCAke1BPUlR9YCk7XG59KTtcbiJdfQ==