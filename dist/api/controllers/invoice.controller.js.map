{"version":3,"sources":["../../../src/api/controllers/invoice.controller.js"],"names":["invoices","_id","item","qty","date","Date","findAll","req","res","next","json","create","body","due","tax","rate","schema","Joi","object","keys","string","required","number","integer","optional","validate","error","value","details","status","message","Invoice","then","invoice","catch","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,WAAW,CACf,EAAEC,KAAK,QAAP,EAAiBC,MAAM,gBAAvB,EAAyCC,KAAK,EAA9C,EAAkDC,MAAM,IAAIC,IAAJ,EAAxD,EADe,EAEf,EAAEJ,KAAK,QAAP,EAAiBC,MAAM,gBAAvB,EAAyCC,KAAK,EAA9C,EAAkDC,MAAM,IAAIC,IAAJ,EAAxD,EAFe,EAGf,EAAEJ,KAAK,QAAP,EAAiBC,MAAM,cAAvB,EAAuCC,KAAK,EAA5C,EAAgDC,MAAM,IAAIC,IAAJ,EAAtD,EAHe,CAAjB;;kBAMe;AACbC,SADa,mBACLC,GADK,EACAC,GADA,EACKC,IADL,EACW;AACtBD,QAAIE,IAAJ,CAASV,QAAT;AACD,GAHY;AAIbW,QAJa,kBAINJ,GAJM,EAIDC,GAJC,EAII;AAAA,oBAC6BD,IAAIK,IADjC;AAAA,QACPV,IADO,aACPA,IADO;AAAA,QACDC,GADC,aACDA,GADC;AAAA,QACIC,IADJ,aACIA,IADJ;AAAA,QACUS,GADV,aACUA,GADV;AAAA,QACeC,GADf,aACeA,GADf;AAAA,QACoBC,IADpB,aACoBA,IADpB;;AAEf,QAAMC,SAASC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/BjB,YAAMe,cAAIG,MAAJ,GAAaC,QAAb,EADyB;AAE/BlB,WAAKc,cAAIK,MAAJ,GACFC,OADE,GAEFF,QAFE,EAF0B;AAK/BjB,YAAMa,cAAIb,IAAJ,GAAWiB,QAAX,EALyB;AAM/BR,WAAKI,cAAIb,IAAJ,GAAWiB,QAAX,EAN0B;AAO/BP,WAAKG,cAAIK,MAAJ,GAAaE,QAAb,EAP0B;AAQ/BT,YAAME,cAAIK,MAAJ,GAAaE,QAAb;AARyB,KAAlB,CAAf;;AAFe,wBAYUP,cAAIQ,QAAJ,CAAalB,IAAIK,IAAjB,EAAuBI,MAAvB,CAZV;AAAA,QAYPU,KAZO,iBAYPA,KAZO;AAAA,QAYAC,KAZA,iBAYAA,KAZA;;AAaf,QAAID,SAASA,MAAME,OAAnB,EAA4B;AAC1B,aAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqBgB,MAAMI,OAA3B,CAAP;AACD;AACDC,sBAAQpB,MAAR,CAAegB,KAAf,EACGK,IADH,CACQ,mBAAW;AACfxB,UAAIE,IAAJ,CAASuB,OAAT;AACD,KAHH,EAIGC,KAJH,CAIS;AAAA,aAAO1B,IAAIqB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqByB,GAArB,CAAP;AAAA,KAJT;AAKD;AAzBY,C","file":"invoice.controller.js","sourcesContent":["import Invoice from \"../models/invoice.model\";\r\nimport Joi from \"joi\";\r\n\r\nconst invoices = [\r\n  { _id: \"123432\", item: \"Amazon Product\", qty: 10, date: new Date() },\r\n  { _id: \"123443\", item: \"Google Product\", qty: 14, date: new Date() },\r\n  { _id: \"123421\", item: \"Ebay Product\", qty: 11, date: new Date() }\r\n];\r\n\r\nexport default {\r\n  findAll(req, res, next) {\r\n    res.json(invoices);\r\n  },\r\n  create(req, res) {\r\n    const { item, qty, date, due, tax, rate } = req.body;\r\n    const schema = Joi.object().keys({\r\n      item: Joi.string().required(),\r\n      qty: Joi.number()\r\n        .integer()\r\n        .required(),\r\n      date: Joi.date().required(),\r\n      due: Joi.date().required(),\r\n      tax: Joi.number().optional(),\r\n      rate: Joi.number().optional()\r\n    });\r\n    const { error, value } = Joi.validate(req.body, schema);\r\n    if (error && error.details) {\r\n      return res.status(400).json(error.message);\r\n    }\r\n    Invoice.create(value)\r\n      .then(invoice => {\r\n        res.json(invoice);\r\n      })\r\n      .catch(err => res.status(500).json(err));\r\n  }\r\n};\r\n"]}