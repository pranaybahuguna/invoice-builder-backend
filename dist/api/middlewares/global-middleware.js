"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setGlobalMiddleware = undefined;

var _morgan = require("morgan");

var _morgan2 = _interopRequireDefault(_morgan);

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _swaggerUiExpress = require("swagger-ui-express");

var _swaggerUiExpress2 = _interopRequireDefault(_swaggerUiExpress);

var _swagger = require("../../config/swagger.json");

var _swagger2 = _interopRequireDefault(_swagger);

var _cors = require("cors");

var _cors2 = _interopRequireDefault(_cors);

var _passport = require("passport");

var _passport2 = _interopRequireDefault(_passport);

var _expressSession = require("express-session");

var _expressSession2 = _interopRequireDefault(_expressSession);

var _passportJwt = require("./passport-jwt");

var _passportGoogle = require("./passport-google");

var _development = require("../../config/env/development");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var setGlobalMiddleware = exports.setGlobalMiddleware = function setGlobalMiddleware(app) {
  app.use(_express2.default.json());
  app.use(_express2.default.urlencoded({ extended: true }));
  app.use((0, _cors2.default)());
  app.use((0, _morgan2.default)("common"));
  app.use(_passport2.default.initialize());
  app.use(_passport2.default.session());
  app.use((0, _expressSession2.default)({
    secret: _development.devConfig.secret,
    resave: false,
    saveUninitialized: true
  }));
  (0, _passportJwt.configureJWTStrategy)();
  (0, _passportGoogle.configureGoogleStrategy)();

  _passport2.default.serializeUser(function (user, done) {
    done(null, user.id);
  });

  _passport2.default.deserializeUser(function (id, done) {
    done(null, { id: "Something" });
  });

  app.use("/api-docs", _swaggerUiExpress2.default.serve, _swaggerUiExpress2.default.setup(_swagger2.default, { explorer: true }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvbWlkZGxld2FyZXMvZ2xvYmFsLW1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsic2V0R2xvYmFsTWlkZGxld2FyZSIsImFwcCIsInVzZSIsImV4cHJlc3MiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwicGFzc3BvcnQiLCJpbml0aWFsaXplIiwic2Vzc2lvbiIsInNlY3JldCIsImRldkNvbmZpZyIsInJlc2F2ZSIsInNhdmVVbmluaXRpYWxpemVkIiwic2VyaWFsaXplVXNlciIsInVzZXIiLCJkb25lIiwiaWQiLCJkZXNlcmlhbGl6ZVVzZXIiLCJzd2FnZ2VyVWkiLCJzZXJ2ZSIsInNldHVwIiwic3dhZ2dlckRvY3VtZW50IiwiZXhwbG9yZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRU8sSUFBTUEsb0RBQXNCLFNBQXRCQSxtQkFBc0IsTUFBTztBQUN4Q0MsTUFBSUMsR0FBSixDQUFRQyxrQkFBUUMsSUFBUixFQUFSO0FBQ0FILE1BQUlDLEdBQUosQ0FBUUMsa0JBQVFFLFVBQVIsQ0FBbUIsRUFBRUMsVUFBVSxJQUFaLEVBQW5CLENBQVI7QUFDQUwsTUFBSUMsR0FBSixDQUFRLHFCQUFSO0FBQ0FELE1BQUlDLEdBQUosQ0FBUSxzQkFBTyxRQUFQLENBQVI7QUFDQUQsTUFBSUMsR0FBSixDQUFRSyxtQkFBU0MsVUFBVCxFQUFSO0FBQ0FQLE1BQUlDLEdBQUosQ0FBUUssbUJBQVNFLE9BQVQsRUFBUjtBQUNBUixNQUFJQyxHQUFKLENBQ0UsOEJBQVE7QUFDTlEsWUFBUUMsdUJBQVVELE1BRFo7QUFFTkUsWUFBUSxLQUZGO0FBR05DLHVCQUFtQjtBQUhiLEdBQVIsQ0FERjtBQU9BO0FBQ0E7O0FBRUFOLHFCQUFTTyxhQUFULENBQXVCLFVBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFnQjtBQUNyQ0EsU0FBSyxJQUFMLEVBQVdELEtBQUtFLEVBQWhCO0FBQ0QsR0FGRDs7QUFJQVYscUJBQVNXLGVBQVQsQ0FBeUIsVUFBQ0QsRUFBRCxFQUFLRCxJQUFMLEVBQWM7QUFDckNBLFNBQUssSUFBTCxFQUFXLEVBQUVDLElBQUksV0FBTixFQUFYO0FBQ0QsR0FGRDs7QUFJQWhCLE1BQUlDLEdBQUosQ0FDRSxXQURGLEVBRUVpQiwyQkFBVUMsS0FGWixFQUdFRCwyQkFBVUUsS0FBVixDQUFnQkMsaUJBQWhCLEVBQWlDLEVBQUVDLFVBQVUsSUFBWixFQUFqQyxDQUhGO0FBS0QsQ0E5Qk0iLCJmaWxlIjoiZ2xvYmFsLW1pZGRsZXdhcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gXCJtb3JnYW5cIjtcclxuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IHN3YWdnZXJVaSBmcm9tIFwic3dhZ2dlci11aS1leHByZXNzXCI7XHJcbmltcG9ydCBzd2FnZ2VyRG9jdW1lbnQgZnJvbSBcIi4uLy4uL2NvbmZpZy9zd2FnZ2VyLmpzb25cIjtcclxuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcclxuaW1wb3J0IHBhc3Nwb3J0IGZyb20gXCJwYXNzcG9ydFwiO1xyXG5pbXBvcnQgc2Vzc2lvbiBmcm9tIFwiZXhwcmVzcy1zZXNzaW9uXCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZUpXVFN0cmF0ZWd5IH0gZnJvbSBcIi4vcGFzc3BvcnQtand0XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZUdvb2dsZVN0cmF0ZWd5IH0gZnJvbSBcIi4vcGFzc3BvcnQtZ29vZ2xlXCI7XHJcbmltcG9ydCB7IGRldkNvbmZpZyB9IGZyb20gXCIuLi8uLi9jb25maWcvZW52L2RldmVsb3BtZW50XCI7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0R2xvYmFsTWlkZGxld2FyZSA9IGFwcCA9PiB7XHJcbiAgYXBwLnVzZShleHByZXNzLmpzb24oKSk7XHJcbiAgYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XHJcbiAgYXBwLnVzZShjb3JzKCkpO1xyXG4gIGFwcC51c2UobG9nZ2VyKFwiY29tbW9uXCIpKTtcclxuICBhcHAudXNlKHBhc3Nwb3J0LmluaXRpYWxpemUoKSk7XHJcbiAgYXBwLnVzZShwYXNzcG9ydC5zZXNzaW9uKCkpO1xyXG4gIGFwcC51c2UoXHJcbiAgICBzZXNzaW9uKHtcclxuICAgICAgc2VjcmV0OiBkZXZDb25maWcuc2VjcmV0LFxyXG4gICAgICByZXNhdmU6IGZhbHNlLFxyXG4gICAgICBzYXZlVW5pbml0aWFsaXplZDogdHJ1ZVxyXG4gICAgfSlcclxuICApO1xyXG4gIGNvbmZpZ3VyZUpXVFN0cmF0ZWd5KCk7XHJcbiAgY29uZmlndXJlR29vZ2xlU3RyYXRlZ3koKTtcclxuXHJcbiAgcGFzc3BvcnQuc2VyaWFsaXplVXNlcigodXNlciwgZG9uZSkgPT4ge1xyXG4gICAgZG9uZShudWxsLCB1c2VyLmlkKTtcclxuICB9KTtcclxuXHJcbiAgcGFzc3BvcnQuZGVzZXJpYWxpemVVc2VyKChpZCwgZG9uZSkgPT4ge1xyXG4gICAgZG9uZShudWxsLCB7IGlkOiBcIlNvbWV0aGluZ1wiIH0pO1xyXG4gIH0pO1xyXG5cclxuICBhcHAudXNlKFxyXG4gICAgXCIvYXBpLWRvY3NcIixcclxuICAgIHN3YWdnZXJVaS5zZXJ2ZSxcclxuICAgIHN3YWdnZXJVaS5zZXR1cChzd2FnZ2VyRG9jdW1lbnQsIHsgZXhwbG9yZXI6IHRydWUgfSlcclxuICApO1xyXG59O1xyXG4iXX0=